---
layout: post
title:  "git"
date:   2014-04-30 23:51:11 +0400
categories: git
tags: devops
---

# git
[https://githowto.com/](https://githowto.com/)

[https://habrahabr.ru/post/203282/](https://habrahabr.ru/post/203282/)
[http://eax.me/git-commands/](http://eax.me/git-commands/)
[http://dev-lab.info/2013/08/%D1%88%D0%BF%D0%B0%D1%80%D0%B3%D0%B0%D0%BB%D0%BA%D0%B0-%D0%BF%D0%BE-git-%D0%BE%D1%81%D0%BD%D0%BE%D0%B2%D0%BD%D1%8B%D0%B5-%D0%BA%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D1%8B-%D1%81%D0%BB%D0%B8%D1%8F%D0%BD/](http://dev-lab.info/2013/08/%D1%88%D0%BF%D0%B0%D1%80%D0%B3%D0%B0%D0%BB%D0%BA%D0%B0-%D0%BF%D0%BE-git-%D0%BE%D1%81%D0%BD%D0%BE%D0%B2%D0%BD%D1%8B%D0%B5-%D0%BA%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D1%8B-%D1%81%D0%BB%D0%B8%D1%8F%D0%BD/)
[http://www.calculate-linux.ru/main/ru/git](http://www.calculate-linux.ru/main/ru/git)
[http://www.asmodeus.com.ua/library/programing/git/git_for_beginners.html](http://www.asmodeus.com.ua/library/programing/git/git_for_beginners.html)
[http://www.internet-technologies.ru/articles/article_1976.html](http://www.internet-technologies.ru/articles/article_1976.html)
[http://ruseller.com/lessons.php?id=2035&rub=28](http://ruseller.com/lessons.php?id=2035&rub=28)

[https://www.coursera.org/](https://www.coursera.org/)


[https://github.com/Igordzu/djsite](https://github.com/Igordzu/djsite)



[http://dev-lab.info/2013/08/%D1%88%D0%BF%D0%B0%D1%80%D0%B3%D0%B0%D0%BB%D0%BA%D0%B0-%D0%BF%D0%BE-git-%D0%BE%D1%81%D0%BD%D0%BE%D0%B2%D0%BD%D1%8B%D0%B5-%D0%BA%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D1%8B-%D1%81%D0%BB%D0%B8%D1%8F%D0%BD/](http://dev-lab.info/2013/08/%D1%88%D0%BF%D0%B0%D1%80%D0%B3%D0%B0%D0%BB%D0%BA%D0%B0-%D0%BF%D0%BE-git-%D0%BE%D1%81%D0%BD%D0%BE%D0%B2%D0%BD%D1%8B%D0%B5-%D0%BA%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D1%8B-%D1%81%D0%BB%D0%B8%D1%8F%D0%BD/)
[http://www.calculate-linux.ru/main/ru/git](http://www.calculate-linux.ru/main/ru/git)
[http://www.asmodeus.com.ua/library/programing/git/git_for_beginners.html](http://www.asmodeus.com.ua/library/programing/git/git_for_beginners.html)





---------------------------------------------------------------------------------------- Работа с GIT --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Создать папку и сделать том git init
Первым этапом является инициализация Git в каталоге. Это можно сделать с помощью команды init, которая создает каталог .git, содержащий всю информацию, связанную с Git для вашего проекта.


mkdir djsite
git init 


Далее нам нужно указать имя и адрес электронной почты. Вы можете сделать это следующим образом, подставив свое имя и электронную почту:

git config --global user.name 'Shaumik'
git config --global user.email 'sd@gmail.com'
git config --global color.ui 'auto'

Кроме того, мы задаем для цвета пользовательского интерфейса значение auto, благодаря чему вывод команд Git будет иметь цветовую подсветку.
Префикс --global перед командами нужен для того, чтобы не вводить эти команды настроек в следующий раз, когда мы запустим проект Git в нашей системе.


 Для того, чтобы проверить текущий статус репозитория, нужно воспользоваться командой git status:
git status



Добавление файлов в Git для отслеживания

На данный момент у нас нет файлов для отслеживания с помощью Git. Нам необходимо добавить файлы конкретно в Git для того, чтобы указать Git, что нужно отслеживать.

Добавляем файлы при помощи команды add:

git add my_file




Для добавления нескольких файлов, можно использовать следующую запись команды (обратите внимание, что мы добавили еще один файл в целях демонстрации):

git add myfile2 myfile3

Вы можете использовать git add рекурсивно, но будьте осторожны с этой командой. Существуют определенные файлы (например, скомпилированные файлы), которые обычно хранят вне репозитория Git.

Если вы будете использовать команду add рекурсивно, она добавит все такие файлы, если они существуют в вашем репозитории.






Удаление файлов

Предположим, вы добавили в Git файлы, которые не хотите отслеживать. В такой ситуации, нужно сказать Git, чтобы он перестал их отслеживать.

Но выполнение простой команды git rm удалит файл не только из Git, но также и из вашей локальной файловой системы! Чтобы

Git прекратил отслеживать файл, но при этом в вашей локальной системе сохранился сам файл, выполните следующую команду:

git rm --cached [file_name]






Коммит изменений

После того, как вы разместили свои файлы, можете закоммитить их в Git. Представьте, что коммит — это запечатление определенного момента, к которому вы можете вернуться, чтобы получить доступ к вашему репозиторию на этом этапе.

Вы можете привязывать к каждому коммиту сообщение, которое добавляется при помощи префикса -m:

git commit -m "My first commit"





Вам нужно добавить эти файлы снова, чтобы осуществить изменения в отслеживаемых файлах для следующего коммита. Можно добавить все отслеживаемые файлы, выполнив команду:

git add -u

Вы можете избежать использования этой команды, воспользовавшись префиксом -a для команды git commit, который добавит все изменения в отслеживаемые файлы.






Управление проектом

Чтобы просмотреть историю вашего проекта, вы можете выполнить следующую команду:

git log










Для того чтобы просмотреть подробную информацию об определенном коммите и файлах, которые были изменены, выполните следующую команду:

git show <hash>

где <hash> это шестнадцатеричное число, ассоциированное с коммитом. Так как данный урок рассчитан на новичков, мы не будем рассматривать, как вернуться назад к состоянию определенного коммита или как управлять ветками.







Работа с удалённым репозиторием

git pull

Данная команда получает обновленную версию из удаленного репозитория, при этом она проверяет на наличие различных проблем при объединении репозиториев и сообщает об этом.

git push

Данная команда целиком передает все сделанные вами изменения, уже закомиченные в локальный репозиторий, в удаленный репозиторий. Для передачи тегов необходимо использовать аргумент –tags





В этом случае удаленный репозиторий в облаке будет выступать в роли удаленного для вашего локального репозитория. Для удобства, удаленный репозиторий, в котором у вас есть доступ на запись, называется origin.

После того, как вы создадите удаленный репозиторий, у вас появится возможность добавить удаленный origin и затем поместить код в origin:

git remote add origin [https://github.com/sdaityari/my_git_project.git](https://github.com/sdaityari/my_git_project.git)
git push -u origin master











git clone — создание копии (удаленного) репозитория

Для начала работы с центральным репозиторием, следует создать копию оригинального проекта со всей его историей локально.

Клонируем репозиторий, используя протокол http:

git clone http://user@somehost:port/~user/repository/project.git

Клонируем репозиторий с той же машины в директорию myrepo:

git clone /home/username/project myrepo

Клонируем репозиторий, используя безопасный протокол ssh:

git clone ssh://user@somehost:port/~user/repository

У git имеется и собственный протокол:

git clone git://user@somehost:port/~user/repository/project.git/








Базовые операции

Для базовой работы с любой системой контроля версий требуется не особенно большой набор операций: добавление файла в репозиторий, удаление файла из репозитория, комит изменений в репозиторий, отмена незакомиченных изменений и получение списка изменений.

Добавление списка файлов в комит:

 git add file1 file2 ... fileN

Добавление всех недобавленных файлов в комит:

git add -a

Удаление файла из комита:

 git rm file1 file2 ... fileN

Удаление файла из комита и с жесткого диска:

git rm -f file1 file2 ... fileN

Комит в локальный репозиторий (надо отметить, что в таком случае закомитятся только файлы, которые были обработаны с помощью git add/rm):

git commit

Комит всех изменений в локальный репозиторий:

git commit -a

Отмена всех изменений, сделанных в дереве, до состояния, которое было при последнем комите в локальный репозиторий( очень опасная команда, подумайте прежде чем пользоваться ею):

git reset --hard

Создание дифа относительно последнего комита:

git diff












Любой проект может быть отправлен на Git для системы контроля версий и в репозитории Git создается каталог. Для этого, выполните следующие команды:

    $git init: В случае, если вы хотите скопировать существующий репозиторий на Git, в случае, когда ваш друг уже хранит проект где-нибудь на GitHub или BitBucket, используйте следующую команду:

    $git clone url: URL-адрес удаленного репозитория, например [https://github.com/AlienCoders/web-development.git.](https://github.com/AlienCoders/web-development.git.)

    Промежуточная область: Промежуточной областью является то место, где все файлы в нее входящие должны быть перечислены перед отправкой. Если вкратце, то промежуточная область необходима как немедленный для исполнения шаг, а не публикация напрямую, потому что, если происходят конфликты, они помечаются в промежуточной области. Файлы могут быть приняты только после разрешения конфликтов.

    Давайте взглянем на следующие команды и их использование:
    $git add <file-name> или $git add: Добавляет все файлы в промежуточную область.
    $git status: Используется для того, чтобы узнать статус рабочего каталога, какие были добавлены файлы в него, а какие нет.
    $git status: Получить статус, что что-то изменилось и отправлено в промежуточную область, или же изменилось и не отправлено туда.
    $git commit –m: Для применения сделанных изменений, сначала вы должны их добавить в промежуточную область. Затем вы их принимаете с помощью этой команды.
    $git rm <file-name>: Если вы ошибочно добавили файл в промежуточную область, то с помощью этой команды можете его удалить из нее.
    $git stash: Git не отслеживает переименование файлов. Другими словами, если вы переименовали файл, помещенный в промежуточную область, то вы должны его снова добавить в промежуточную область, а затем принять. Вы можете сохранить изменения, но в действительности не принимать в репозиторий с помощью этой команды.
    $git stash apply: Берет все текущие изменения и помещает их в стек. Затем вы можете продолжать работу с учетом ваших изменений. Однажды, когда вы захотите получить сохраненные изменения, воспользуйтесь этой командой.


git branch: Чтобы представить список существующих ветвей через Git, используем данную команду. 

git checkout –b <new-branch-name>: С помощью этой команды может быть создана новая ветвь в существующем репозитории. Мы можем представить, как это будет выглядеть логически с помощью этой блок-схемы: 

Вы получите сообщение, уведомляющее вас о том, что вы переключились на новую ветку. Если вы хотите переключиться обратно на старую ветвь, то используйте следующие команды:
$git checkout <old-branch-name>. Вы получите сообщение: Switched to branch <old-branch-name>.
$git merge <branch-name>: используя эту команду, вы можете произвести слияние с указанной ветвью. Ваша текущая ветвь объединяется с ветвью <branch-name>. Для синхронизации с откатом изменений назад, на ветвь <branch-name>, вы можете выполнить команду checkout из-под текущей ветви применимо к ветви <branch-name>, а затем произвести повторное слияние. Вы также можете пометить важные точки в вашей истории принятия изменений, используя теги.
После принятия изменений, вы можете пометить важное принятие изменений тегом с помощью команды: $git tag –a v1.0.
Для получения новых изменения с удаленного сервера, вы можете получить эти изменения с Git используя команду $git fetch.
Для слияния изменений с текущей веткой, вы можете использовать команду $git pull.
После того, как вы завершите свои изменения, вы можете принять их и загрузить в удаленный репозиторий, используя команду $git push.








Клонировать удалённый репозиторий
git clone ssh://med@192.168.1.128:2222/srv/med/med.git
При клонировании на выходе вы получаете вполне отдельный и самостоятельный репозиторий с ссылкой на оригинальный. Если вам она так не нравится можете удалить, но обычно смысла в этом маловато.


Добавить новый удалённый Git-репозиторий
git remote add <Любое название удаленного репозитория> <Имя ssh пользователя>@<а адресс сервера>:<путь до репозитория на сервере>
Для того, чтобы добавить удалённый репозиторий и присвоить ему имя (shortname), просто выполните команду git remote add [shortname] [url]:
git remote add hub ~/site_hub.git
git remote add origin [https://github.com/sdaityari/my_git_project.git](https://github.com/sdaityari/my_git_project.git)

origin - источник
origin - в данном месте просто название удалённого репозитория 

Наш пример
git remote show
medhub


Pushing to Your Remotes

 git push hub master - означает влить в репозиторий ветку мастер
When you have your project at a point that you want to share, you have to push it upstream. The command for this is simple: git push [remote-name] [branch-name]


Обычно deploy - процесс заливки обновлений. Чаще всего эта процедура сложнее, чем просто `git pull`, это и сборка статики (js/css) + минификация, это очистка кэшей, это рестарт вспомогательных сервисов, миграция бд, запуск тестов и т.д. 




Замерджить все ветки локального репозитория на удаленный репозиторий (аналогично вместо origin можно указать и remotename, см выше):
git push origin

Аналогично предыдущему, но делается пуш только ветки master:
git push origin master

Запушить текущую ветку, не вводя целиком ее название:
git push origin HEAD




Замерджить все ветки с удаленного репозитория:
git pull origin

Аналогично предыдущему, но накатывается только ветка master:
git pull origin master

Накатить текущую ветку, не вводя ее длинное имя:
git pull origin HEAD

Скачать все ветки с origin, но не мерджить их в локальный репозиторий:
git fetch origin

Аналогично предыдущему, но только для одной заданной ветки:
git fetch origin master








'Рабочая директория' Git это директория которая содержит в себе то с чем вы работаете или то что вы извлекли из истории проекта в данный момент. Файлы в этой директории часто удаляются или изменяются Git-ом когда вы переключаетесь между ветками - не переживайте это нормально. Вся история вашего проекта хранится в директории Git; рабочая директория это просто временное место где вы можете модифицировать файлы, а затем выполнить коммит.

В Git существуют «bare» и «non-bare» репозитории. Первый создается командой
Shell
1
	
git --bare init

Он отличается тем, что в папке с этим репозиторием нет рабочих файлов и подпапки .git — все ее привычное содержимое как раз и находится в этом репозитории.

«Non-bare» репозиторий (наиболее привычный) создается командой
Shell
1
	
git init

и отличается от «bare» репозитория тем, что содержит в себе все файлы проекта и папку .git со всей информацией о репозитории.

    Обычный git-репозиторий подразумевает, что вы будете использовать его как рабочую директорию, поэтому вместе с файлами проекта в актуальной версии, git хранит все служебные, «чисто-репозиториевские» файлы в поддиректории .git. В удаленных репозиториях нет смысла хранить рабочие файлы на диске (как это делается в рабочих копиях), а все что им действительно нужно — это дельты изменений и другие бинарные данные репозитория. Вот это и есть «чистый репозиторий».
    
Как правило, репозитории, оканчивающиеся на «.git» являются чистыми репозиториями. Мы видим, что в репозитории hello.git нет рабочего каталога. По сути, это есть не что иное, как каталог .git нечистого репозитория.



Bare значит, то это не рабочий репозитарий, а просто склад веток, куда каждый может пушить. И если мы попробуем поработать с ним напрямую (покоммитить), то нас ждет облом.
    
    
    
    Keeping the Git directory and the working tree separate
    [http://ah.thameera.com/keeping-the-git-directory-and-the-working-tree-separate/](http://ah.thameera.com/keeping-the-git-directory-and-the-working-tree-separate/)
    
    
    
    C версии 2.5 в Git появились рабочие деревья – worktree. Это новшество позволяет выгружать в отдельную папку единичные ветки и работать с ними параллельно работе с текущей рабочей веткой.

Я вам скажу это чертовски удобно! Сделать быструю правку в отдельной ветке без танцев с бубнами (stash - checkout - commit - push - checkout - stash pop, либо каким-нибудь другим способом) теперь возможно! Да, умудрённые опытом гуру скажут мне, что можно всё тоже самое сделать иначе и вообще преимуществ они не видят, но супротив одного важного аргумента возразить мало кому удастся: рабочие деревья позволяют держать запущенными две версии вашего софта, что может быть полезно для сравнения поведения после внесённых правок.

Подробную документацию по работе можно найти здесь.
Пример работы с worktree

Добавить рабочую ветку
git worktree add ../folder name-of-branch

Посмотреть список рабочих деревьев
git worktree list

Когда все изменения сделаны и отправлены на сервер можно просто удалить эту папку, а затем выполнить команду которая всё подчистит.
git worktree prune






Git: наглядная справка - хорошее пособие
[http://marklodato.github.io/visual-git-guide/index-ru.html](http://marklodato.github.io/visual-git-guide/index-ru.html)
    
Как работает git
[https://habrahabr.ru/post/313890/](https://habrahabr.ru/post/313890/)
    
    
    Прочитать
    [https://habrahabr.ru/post/106912/](https://habrahabr.ru/post/106912/)
    [http://codenamecrud.ru/ruby-programming/using-git-in-the-real-world](http://codenamecrud.ru/ruby-programming/using-git-in-the-real-world)
    [https://habrahabr.ru/post/203282/](https://habrahabr.ru/post/203282/)
    [https://habrahabr.ru/post/174467/](https://habrahabr.ru/post/174467/)
    [https://habrahabr.ru/post/273897/](https://habrahabr.ru/post/273897/)
    [https://habrahabr.ru/post/127213/](https://habrahabr.ru/post/127213/)
    [https://habrahabr.ru/post/157175/](https://habrahabr.ru/post/157175/)
    [https://habrahabr.ru/post/75990/](https://habrahabr.ru/post/75990/)
