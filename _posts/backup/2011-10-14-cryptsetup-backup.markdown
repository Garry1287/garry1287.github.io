---
layout: post
title:  "cryptsetup-backup"
date:   2011-10-14 04:54:42 +0400
categories: backup crypt
tags: cryptsetup backup
---

# cryptsetup-backup
До разработки LUKS существовало 4 несовместимых методики шифрования блочных устройств в Linux: kerneli (cryptoloop), loop-AES, util-linux 2.12 (losetup), dm-crypt (cryptsetup). Теперь их осталось всего 5 ;). 

ecryptfs vs dm-crypt(LUKS)
[https://wiki.archlinux.org/index.php/ECryptfs_%28%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9%29](https://wiki.archlinux.org/index.php/ECryptfs_%28%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9%29)  - один из методов
[https://cryptoworld.su/%D1%88%D0%B8%D1%84%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-%D0%B2-linux/](https://cryptoworld.su/%D1%88%D0%B8%D1%84%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-%D0%B2-linux/)

Диск > Раздел LUKS > LVM > Том LV > ФС
Тот раздел, который у вас теперь определяется как ext4, попробуйте напрямую смонтировать как LUKS контейнер: cryptsetup luksOpen /dev/sdX test
Если заголовки целы, то у вас спросят пароль и появится блочное устройство /dev/mapper/test, которое уже можно монтировать модулем файловой системы, которая была в контейнере.


Сделать бэкап LUKS-заголовка:

cryptsetup luksHeaderBackup <LUKS_DEVICE> --header-backup-file <header_file_name>

Восстановить LUKS-заголовок из бэкапа:

cryptsetup luksHeaderRestore <LUKS_DEVICE> --header-backup-file <header_file_name>



[https://www.easycoding.org/2016/12/09/shifruem-domashnij-razdel-ustanovlennoj-sistemy.html](https://www.easycoding.org/2016/12/09/shifruem-domashnij-razdel-ustanovlennoj-sistemy.html)


Отличное руководство
[https://www.gerki.pw/threads/shifruem-diski-v-linux.639/](https://www.gerki.pw/threads/shifruem-diski-v-linux.639/)
[https://wiki.debian.org/ru/Crypt](https://wiki.debian.org/ru/Crypt)
[http://www.opennet.ru/tips/info/2029.shtml](http://www.opennet.ru/tips/info/2029.shtml)

Криптование раздела без 
[https://habrahabr.ru/post/169983/](https://habrahabr.ru/post/169983/)


Ядро Linux поддерживает два популярных типа шифрования, dm-crypt и ecryptfs. Второй — это зашифрованная файловая система, являющаяся «надстройкой» над стандартной. Смонтировав «нижнюю» файловую систему, вы увидите все файлы, но их содержание, как и имена, будут представлены в шифрованном виде. Работает она на уровне каталога, так что прочие каталоги на той же файловой системе можно оставить в открытом виде или зашифровать отдельно. Этот метод, среди прочих, используется в Ubuntu, для шифрования домашних папок пользователей.

Другой метод, который нам хотелось бы рассмотреть подробнее, называется dm-crypt, и он работает на более низком уровне, обеспечивая шифрование блочного устройства, на котором расположена файловая система. Недавний тест, проведённый Phoronix, показал более высокую производительность в случае, когда диск был полностью зашифрован dm-crypt, чем при использовании ecryptfs на домашних каталогах.




III. EncFs (ENCrypted File System)

Собственно, Википедия уже все сказала. Существует сие для всех наиболее популярных систем (да, и для Андроида - в том числе), причем результаты работы совместимы между собой: контейнер, созданный под управлением одной OS, нормально читается под другой. Отсутствуют проблемы, описанные в п. 2. Ссылка на Windows - версию - в тесте википедии.

Каковы достоинства и недостатки этого метода?

Достоинства:

1. Шифруется и дешифруется только то, с чем работаешь в данный момент.
2. Нет понятия "контейнер" как таковой, EncFS это прозрачная для пользователя прослойка между "настоящей" файловой системой и программами.
3. Возможно автоматическое демонтирование шифрованного раздела если с файлами на нем никто не работает заданное количество времени.
4. Возможно принудительное демонтирование если надо это сделать быстро.
5. Возможны такие вещи, как шифрование носителей, находящихся вне Вашего компьютера (Дропбокс и иже с ними).
6. Возможно использовать один Дропбоксовский контейнер для хранения шифрованной информации, предназначенной разным людям.
7. Никаких проблем с бэкапом, многопользовательским доступом и пр.
8. То, что шифруется подобным образом, совершенно необязательно физически располагается только в данном конкретном контейнере на данном конкретном диске, даже если это видится именно так для пользователя.

Недостатки:

1. Двусмысленное шифрование толком не обеспечивается. Я нашел статью, в которой описывается, как это якобы, можно сделать, но метод не выдерживает критики, на мой взгляд.
2. Т.к. EncFS ставится поверх существующей файловой системы, то пользователь имеет все достоинства и все недостатки оной. Кроме того, можно увидеть размеры шифрованных файлов, дату последнего к ним обращения,права на файлы и пр.
3. EncFS шифрует не только содержимое файлов, но и имена файлов. При этом т.к. длина имени зашифрованного файла всегда получается длинее длины имени оригинального файла, возникает автоматическое ограничение на хранение файлов с очень длинными именами (более полутора сотен символов, если говорить очень обобщенно).
4. Чего нет в Википедии, но что представляется мне важным: если Вы используете rsync для резервного копирования, то делать это надо с ключом -T "Путь к каталогу вне EncFs", потому как во-первых, сильно быстрее будет, во-вторых, снимаются проблемы с временными файлами rsync, имеющими место быть в случае использования EncFs. Это влечет за собой небольшие изменения в уже написанных скриптах бэкапа.

Памятуя о доброй традиции стрелять в пианиста: я знаю, что encfs далеко не единственная возможность, и даже не самая быстрая. 





Увеличить размер контейнера.
(Нажмите, чтобы показать/скрыть)
   1. Все отключено.
   2. Увеличим развер файла-контейнера (на 50M)
dd if=/dev/urandom bs=1M count=50 >> /home/user/.private/container.crt
   3. открываем
(Нажмите, чтобы показать/скрыть)
sudo cryptsetup luksOpen /home/user/.private/container.crt -d /home/user/keys/container.key container
      увеличиваем размер контейнера (на все добавленное место)
sudo cryptsetup resize container
   4. проверка ФС
sudo e2fsck -f /dev/mapper/container
   5. увеличение размера ФС (на все добавленное место)
sudo resize2fs -p /dev/mapper/container
(Нажмите, чтобы показать/скрыть)

Вывод примерно такой:
user@user:~$ sudo e2fsck -f /dev/mapper/container
e2fsck 1.42 (29-Nov-2011)
Проход 1: Проверка inodes, блокs, а также размеров
Pass 2: Checking каталог structure
Pass 3: Checking каталог connectivity
Pass 4: Checking reference counts
Pass 5: Checking группа summary information
container: 14/12288 files (7.1% non-contiguous), 6455/49152 blocks

user@user:~$ sudo resize2fs -p /dev/mapper/container
resize2fs 1.42 (29-Nov-2011)
Resizing the filesystem on /dev/mapper/container to 100352 (1k) blocks.
Begin pass 1 (max = 7)
Увеличение таблицы inod'овXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
The filesystem on /dev/mapper/container is now 100352 blocks long.
Монтируем и смотрим.
(Нажмите, чтобы показать/скрыть)
sudo mount /dev/mapper/container /home/user/private
df -h дает
Файл.система           Размер Использовано  Дост Использовано% Cмонтировано в
/dev/mapper/container     91M         1,2M   88M            2% /home/user/private




СОХРАНИТЬ 
[https://www.lisenet.com/2013/luks-add-keys-backup-and-restore-volume-header/](https://www.lisenet.com/2013/luks-add-keys-backup-and-restore-volume-header/)




pam_mount есть.

man crypttab
Если хотим монтировать вручную, то добавляем опцию noauto в поле "параметры/опции". 
noauto
    Заставляет boot.crypto пропускать эту запись в течении загрузки. Для активации этого тома позже используйте: /etc/init.d/boot.crypto start <name> 
  loop
    Всегда подключать петлевое устройство перед отображением устройства. Нормально петлевое устройство автоматически только для файлов образов. Используется, если размер блока физического устройства не совпадает с размером блока содержащейся на нем файловой системой.  
    

1. Делать backup контейнера
2. Делать backup header LUKS (чаще)
3. Live CD на флешке, с тем же IP. Если необходимы данные, подмонтировал и получил доступ
3. Список того, что надо поместить
.config
.crlks
.electrum
.firefox
.git
.thunderbird


Для защиты от криптоаналитиков (а не просто случайных любопытных) рекомендуется предварительно заполнить раздел с помощью /dev/urandom (/dev/random ещё лучше, но очень медленно; можно также использовать "shred -v [-n 1] /dev/sdaXY" или "wipe [-qQ 1] -i -M a -k /dev/sdXY). В крайнем случае, обнулить зашифрованный виртуальный раздел. Использования "badblocks -w -t random" недостаточно, хотя и полезно само по себе.

Работа с master-key-file
[https://habrahabr.ru/post/329648/](https://habrahabr.ru/post/329648/)
[http://b87.nl/cryptsetup-and-the-master-key](http://b87.nl/cryptsetup-and-the-master-key)

Продумать


sudo /usr/sbin/cryptsetup luksOpen /dev/disk/by-id/ata-WDC_WD2500AAJS-22VTA0_WD-WMART2037954-part2 cr_ata-WDC_WD2500AAJS-22VTA0_WD-WMART2037954-part2
sudo mount /dev/mapper/cr_ata-WDC_WD2500AAJS-22VTA0_WD-WMART2037954-part2 /virt

