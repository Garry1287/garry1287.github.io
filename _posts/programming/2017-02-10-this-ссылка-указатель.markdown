---
layout: post
title:  "this-ссылка-указатель"
date:   2017-02-10 02:51:09 +0300
categories: programming
tags: programming
---

# this-ссылка-указатель
Указатель - переменная хранящая адрес другой переменной, например 0xbfd86d6c
int x
int *pointerToInteger;  - указатель

 Чтобы получить адрес переменной, нужно перед ее именем написать амперсанд.

pointerToInteger = &x;


Чтобы получить значение переменной по ее адресу, следует написать звездочку перед именем указателя.
int y = *pointerToInteger;

Получаем y раное x. (вернее они одно и тоже)
Такая операция в русском языке называется не слишком благозвучным словом «разыменование». В английском — dereference.



По существу, указатель представляет собой объект, хранящий ссылку на другой объект




Будем называть ссылкой (в широком смысле) некоторое имя или фразу, однозначно идентифицирующие объект. Очевидно, несколько ссылок могут обозначать один и тот же объект, представляя его различные имена.
Ссылка - это банально - другое название переменной

int a;       //переменная с именем "a" типа int размещена по адресу 0xbfd86d6c
int &ra = a; //задано альтернативное имя (ra) для переменной по адресу 0xbfd86d6c


Ссылка. Передается сам объект. 
Указатель. Передается адрес объекта.

По большей части в том, что в С ссылок нет в принципе. Это такое ноухау С++, чтобы упростить передачу указателей на объекты

при передаче объекта (не важно POD или собственного типа) по значению создаётся копия объекта (выделяется новый участок памяти, в него копируются поля объекта), при передаче по ссылке копия объекта не создаётся, передаётся адрес в памяти по которому находится объект. Так вот передавать этот самый адрес объекта можно либо в стиле С с помощью указателей, либо в стиле С++ с помощью ссылок.


Существует простое преобразование между указателями и ссылками: операция взятия адреса (&) получает указатель, ссылающийся на тот же самый объект при переходе по ссылке, 
а ссылка, которая инициализирована при разыменовании (*) указателя, будет указывать на тот же объект, что и указатель, где это возможно без неопределённого поведения. Эта тождественность - отражение типичной реализации, которая весьма эффективно превращает ссылки в указатели, которые неявно разыменовываются при каждом использовании.






