---
layout: post
title:  "2>&1"
date:   2014-06-02 09:02:07 +0400
categories: bash
tags: bash
---

# 2>&1

Стандартный ввод

Поток номер 0 (stdin) зарезервирован для чтения команд пользователя или входных данных.

При интерактивном запуске программы по умолчанию нацелен на чтение с устройства текстового интерфейса пользователя (клавиатуры).
 Командная оболочка UNIX (и оболочки других систем) позволяют изменять цель этого потока с помощью символа «<».
 Системные программы (демоны и т. п.), как правило, не пользуются этим потоком.
Стандартный вывод

Поток номер 1 (stdout) зарезервирован для вывода данных, как правило (хотя и не обязательно) текстовых.

При интерактивном запуске программы по умолчанию нацелен на запись на устройство отображения (монитор). 
Командная оболочка UNIX (и оболочки других систем) позволяют перенаправить этот поток с помощью символа «>». 
Средства для выполнения программ в фоновом режиме (например, nohup) обычно переназначают этот поток в файл.

## Стандартный вывод ошибок

Поток номер 2 (stderr) зарезервирован для вывода диагностических и отладочных сообщений в текстовом виде.

Чаще всего цель этого потока совпадает с stdout, однако, в отличие от него, цель потока stderr не меняется при «>» и создании конвейеров («|»).
 То есть, отладочные сообщения процесса, вывод которого перенаправлен, всё равно попадут пользователю. 
Командная оболочка UNIX позволяет изменять цель этого потока с помощью конструкции «2>».
Например, для подавления вывода этого потока нередко пишется «2>/dev/null».

POSIX-функция обработки ошибок perror используется в языках программирования 
и и C++ для вывода сообщения об ошибке в stderr на основе номера последней ошибки, хранящейся в errno.



[http://rus-linux.net/MyLDP/HOWTO-ru/Bash-Progr-Intro-HOWTO/Bash-Prog-Intro-HOWTO-3.html](http://rus-linux.net/MyLDP/HOWTO-ru/Bash-Progr-Intro-HOWTO/Bash-Prog-Intro-HOWTO-3.html)

stdin - cтандартный ввод, stdout - стандартный вывод и stderr - стандартный поток ошибок
0  - stdin
1 означает stdout, а 2 - stderr.

if cd "$dir" 2>/dev/null; then   # "2>/dev/null" подавление вывода сообщений об ошибках.



Я долго пытался понять правила перенаправления потоков вывода в юниксовой оболочке bash. Действительно, вроде всё понятно, но...

Например, было непонятно, почему работает команда, перенаправляющая stderr в stdout:
ls *.txt *.err >file 2>&1

Но при этом не работает вот так:
ls *.txt *.err 2>&1 >file

И уж совсем китайской грамотой казалась строка:
cat file 3>&2 2>&1 1>&3

Да, мне понятно, что эта команда меняет местами потоки вывода stderr и stdout. 
То, что выводилось в stdout, теперь будет выводиться в stderr и наоборот. Но почему именно так и никак иначе?..

Всё оказалось не просто, а очень просто :) Спасибо замечательной книге "Unix Power Tools" издательства O'Reilly.

Дело в том, что оболочка, при разборе параметров командной строки, читает параметры строго слева направо. 
Этот факт кажется совсем неудивительным, но оказывается именно это правило оказывает влияние на результат обработки командной строки.

Разберем, как интерпретируется строка "ls *.txt *.err >file 2>&1":

    параметр ">file" — означает "перенаправить стандартный поток вывода (stdout) в файл c именем file";

    параметр "2>&1" — означает "перенаправить стандартный поток ошибок (2) в стандартный поток вывода (1). 
Но, так как стандартный поток вывода уже перенаправлен в файл, то и стандартный поток ошибок перенаправляется туда же.

В результате оба потока будут перенаправлены в файл.

А как интерпретируется строка "ls *.txt *.err 2>&1 >file"?

    параметр "2>&1" — означает "перенаправить стандартный поток ошибок в стандартный поток вывода". 
На этот момент поток вывода (1) направляется в терминал, а значит, что поток ошибок тоже перенаправится в терминал.

    параметр ">file" — означает "перенаправить стандартный поток вывода (stdout) в файл c именем file".

Как результат — поток вывода будет направлен в файл, а поток ошибок — в терминал.

После этого совсем не трудно понять, как работает команда "cat file 3>&2 2>&1 1>&3". Тут тоже все просто:

    поток вывода 3 перенаправить туда же, куда выводится поток вывода 2 — в stderr;

    поток вывода 2 перенаправить туда же, куда выводится поток 1 — в stdout;

    поток вывода 1 перенаправить туда же, куда выводится поток 3 — в stderr

В результате, потоки вывода stderr и stdout как будто меняются местами — поток 1 идет в stderr, а поток 2 идет в stdout. 